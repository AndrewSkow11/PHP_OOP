<?php 
// включение и выполнение файла в текущем скрипте
require_once '../vendor/autoload.php';
use App\Student; 
use App\BankAccount;
use App\Rectangle;
use App\Circle;

$student1 = new Student("Иван", 25, "МГУ");
$student2 = new Student("Марья", 25, "РГГУ");
$student1->setUniversity("БГУ");
$student2->setUniversity("БЧУ");

echo "<div style=\"border: 1px solid red;\"";
echo $student1->introduce();
echo "<br>";
echo $student2->introduce();
echo "</div>";

echo $student1->greet();
$student1->printObject();
echo $student2->printObject();

$bankAccount1 = new BankAccount(
    "Иван",
    1234,
    "1234567890",
    "$"
);
$bankAccount1->displayAccountInfo();

$bankAccount1->deposit(1000);
$bankAccount1->withdraw(500);
$bankAccount1->displayAccountInfo();

$myRectangle = new Rectangle("Чёрный квадрат", 25, 25);
$myRectangle->printRectangleInfo();


$myCircle = new Circle("Синий круг", 10);
$myCircle->printCircleInfo();

?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ООП в PHP</title>
</head>

<body>
    
    <h1>ООП в PHP</h1>
    <h2>Список тем:</h2>
    <ol>
        <li>Установка Сomposer. Что это и зачем</li>
        <li>Класс, свойства методы, объекты</li>
        <li>Подключение autoliad. Пространство имён</li>
        <li>Конструктор</li>
        <li>Наследование</li>
        <li>Уровни доступа</li>
        <li>Геттер, сеттер</li>
        <li>Абстрактный класс, абстрактные методы</li>
        <li>Трейт</li>
        <li>Статические методы и своства</li>
        <li>Приниципы ООП. Инкапсуляция, наследование, полиморфизм, абстракция</li>
        <li>Магические методы</li>
    </ol>
    <h2>
        Отличие процедурного подхода от ООП
    </h2>
    <p>
        Cмысл процедурного программирование - разделение программы на процедуры (функции).
        В ООП программа разделяется на объекты и классы, внутри которых находятся те самые функции (методы).
        Процедурный подход не поддерживает наследование.
        ООП предлагает более структурированный подход.
    </p>
    <h2>Composer</h2>
    <p>
        Composer - инструмент для управления зависимостями в PHP проектах,
        он позволяет легко устанавливать и управлять библиотеками и пакетами,
        которые необходимы для разработки какого-либо проекта. Также composer 
        используется для решения проблемы управления зависимостями. Одна из ключевых 
        функций композера - автозагрузка классов
    </p>

    <h2>Калассы, свойства, методы, объекты</h2>
    <p>
        Типичная структура проекта на PHP: <br>
        - директория app (файлы с классами и другие служебные файлы для работы приложения) <br>
        - директория public обычно хранит файлы, которые доступны напрямую через веб <br>
        В папке <b>app</b> и создаются классы. <br>
        Директория <b>public</b> - корень веб-сервера, откуда запускаются страницы и обрабатываются http-запросы. <br>
        В public создаются объекты, app хранит классы. <br>
    </p>
    <p>
        Класс - шаблон или чертёж для создания объектов. 
        Класс определяет структуру и поведение объектов. <br>
    </p>
    <h2>Автозагрузка</h2>
    <p>
        Composer генерирует автозагрузчик - файл autoload.php, 
        который автоматически будет загружать классы, когда они 
        используются в нашем коде. 
        Используется команда <i>% composer dump-autoload</i>
    </p>
    <h2>Наследование extends</h2>
    <h2>6/13 private, protected, public</h2>
    <h3>Модифакотры (уровни) доступа</h3>
    <p>
        <i>private</i> - доступно только внутри текущего класса <br>
        <i>protected</i> - доступно в текущем классе и в его наследниках <br>
        <i>public</i> - доступно из любого места в любом классе <br>
    </p>
    <h2>07/13. Геттеры и сеттеры getters, setters</h2>
    <h2>08/13. Абстрактные классы и методы</h2>
    <p>
        Абстрактные методы позволяют создавать шаблоны классов и методов. %
        Абстрактный класс будет содержать абстрактные методы, которые 
        будут реализовываться уже в дочерних классах. 
        <strong>
            Ключевая особенность в том, что от абстрактных классов нельзя 
            создать объекты напрямую, т.е. от них можно наследоваться 
            только другим классам. От которых уже будет создаваться объект. 
        </strong>
    </p>

    <p><a href="vehicle.php">ДЗ по абстрактным классам</a></p>

    <h2>Интерфейсы</h2>
    <p>
        Интерфейсы похожая на абстрактные классы сущность, и часто 
        спрашивают в чём отличие абстрактных классов от интерфейсов. 
        Интерфейсы определяют набор методов, которые класс должен реализовать. 
        В случае абстрактного класса определялись свойства и методы, иногда с реализацией. 
        В случае интерфейса будут только методы без реализации, которые будут реализиоваться 
        в классах, которые используют интерфейс. <br>
        <strong>implemetns</strong> - ключевое слово для реализации интерфейса. 
        <br>
        Методы из интерфейсов также обязательно для реализации, как и методы абстрактных классов. 
        Класс может имплементировать несколько интерфейсов, 
        <strong>extends</strong> - ключевое слово для наследования <br>
        <strong>implements</strong> - ключевое слово для реализации интерфейса <br>
        Наследоваться от нескольких классов нельзя, но можно реализовывать несколько интерфейсов. 
    </p>

    <h2>
        Интерфейс DataFormat
    </h2>
    <p>
        <a href="data_format.php">Тест DataFormat</a>
    </p>
</body>

</html>