<?php 
// включение и выполнение файла в текущем скрипте
//require_once ("../app/Student.php");
require_once ("../app/print_functions.php");

use App\Student;
require_once '../vendor/autoload.php';


$student1 = new Student();
$student1->name = "Иван";
$student1->age = 25;

echo $student1->greet();
$student1->printObject();
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ООП в PHP</title>
</head>

<body>
    <h1>ООП в PHP</h1>
    <h2>Список тем:</h2>
    <ol>
        <li>Установка Сomposer. Что это и зачем</li>
        <li>Класс, свойства методы, объекты</li>
        <li>Подключение autoliad. Пространство имён</li>
        <li>Конструктор</li>
        <li>Наследование</li>
        <li>Уровни доступа</li>
        <li>Геттер, сеттер</li>
        <li>Абстрактный класс, абстрактные методы</li>
        <li>Трейт</li>
        <li>Статические методы и своства</li>
        <li>Приниципы ООП. Инкапсуляция, наследование, полиморфизм, абстракция</li>
        <li>Магические методы</li>
    </ol>
    <h2>
        Отличие процедурного подхода от ООП
    </h2>
    <p>
        Cмысл процедурного программирование - разделение программы на процедуры (функции).
        В ООП программа разделяется на объекты и классы, внутри которых находятся те самые функции (методы).
        Процедурный подход не поддерживает наследование.
        ООП предлагает более структурированный подход.
    </p>
    <h2>Composer</h2>
    <p>
        Composer - инструмент для управления зависимостями в PHP проектах,
        он позволяет легко устанавливать и управлять библиотеками и пакетами,
        которые необходимы для разработки какого-либо проекта. Также composer 
        используется для решения проблемы управления зависимостями. Одна из ключевых 
        функций композера - автозагрузка классов
    </p>

    <h2>Калассы, свойства, методы, объекты</h2>
    <p>
        Типичная структура проекта на PHP: <br>
        - директория app (файлы с классами и другие служебные файлы для работы приложения) <br>
        - директория public обычно хранит файлы, которые доступны напрямую через веб <br>
        В папке <b>app</b> и создаются классы. <br>
        Директория <b>public</b> - корень веб-сервера, откуда запускаются страницы и обрабатываются http-запросы. <br>
        В public создаются объекты, app хранит классы. <br>
    </p>
    <p>
        Класс - шаблон или чертёж для создания объектов. 
        Класс определяет структуру и поведение объектов. <br>
    </p>
    <h2>Автозагрузка</h2>
    <p>
        Composer генерирует автозагрузчик - файл autoload.php, 
        который автоматически будет загружать классы, когда они 
        используются в нашем коде. 
        Используется команда <i>% composer dump-autoload</i>
    </p>
</body>

</html>